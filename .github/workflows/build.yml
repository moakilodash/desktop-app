name: Release Tauri App

on:
  push:
    branches:
      - ci_cd
    tags:
      - 'v*.*.*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}
    
    steps:
      - uses: actions/checkout@v3
      - name: Create Release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: context.ref.replace('refs/tags/', ''),
              name: `Release ${context.ref.replace('refs/tags/', '')}`,
              draft: true,
              prerelease: false
            });
            return data.id;

  build:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            runner-label: [self-hosted, Linux, X64]
            artifact_name: linux
            asset_name: kaleidoswap-app-linux-amd64.deb
          - os: macos-ventura
            runner-label: [self-hosted, macOS, X64]
            artifact_name: macos
            asset_name: kaleidoswap-app-macos-amd64.dmg
          - os: windows-server-2022
            runner-label: [self-hosted, Windows, X64]
            artifact_name: windows
            asset_name: kaleidoswap-app-windows-amd64.msi

    runs-on: ${{ matrix.runner-label }}

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Setup cache for dependencies
    - name: Cache pnpm modules
      uses: actions/cache@v3
      with:
        path: ~/.pnpm-store
        key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          src-tauri/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    # Windows-specific setup
    - name: Windows Setup
      if: matrix.os == 'windows-server-2022'
      uses: microsoft/setup-msbuild@v1.1

    # Install system dependencies based on OS
    - name: Install Linux Dependencies
      if: matrix.os == 'ubuntu-22.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libayatana-appindicator3-dev librsvg2-dev

    - name: Setup Node
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'pnpm'

    - name: Install pnpm
      run: npm install -g pnpm

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install dependencies
      run: pnpm install

    # Build the application
    - name: Build Tauri App
      uses: tauri-apps/tauri-action@v0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
        TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
      with:
        tagName: ${{ github.ref_name }}
        releaseName: "Release ${{ github.ref_name }}"
        releaseId: ${{ needs.create-release.outputs.release_id }}
        releaseBody: "See the assets to download this version and install."
        
    # Upload artifacts
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./src-tauri/target/release/bundle/${{ matrix.artifact_name }}/${{ matrix.asset_name }}
        asset_name: ${{ matrix.asset_name }}
        asset_content_type: application/octet-stream

  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin
      
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          
      - name: Install pnpm
        run: npm install -g pnpm
          
      - name: Install dependencies
        run: pnpm install
        
      - name: Build Tauri App (Apple Silicon)
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tagName: v__VERSION__
          releaseName: "App v__VERSION__"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false
          args: --target aarch64-apple-darwin