name: Build Kaleidoswap App

on:
  push:
    branches:
      - dev
      - ci_cd
    tags:
      - 'v*.*.*'

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-22.04
            runner-label: [self-hosted, Linux, X64]
          - os: macos-ventura
            runner-label: [self-hosted, macOS, X64]
          - os: windows-server-2022
            runner-label: [self-hosted, Windows, X64]

    runs-on: ${{ matrix.runner-label }}

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    # Install Chocolatey only if not already installed
    - name: Install Chocolatey on Windows
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        if (-Not (Test-Path "C:\ProgramData\chocolatey\bin\choco.exe")) {
          Set-ExecutionPolicy Bypass -Scope Process -Force; `
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; `
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'));
        } else {
          Write-Host "Chocolatey is already installed";
        }

    # Install MSVC Build Tools and OpenSSL via Chocolatey
    - name: Install MSVC Build Tools and OpenSSL on Windows
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        & "C:\ProgramData\chocolatey\bin\choco.exe" install openssl visualstudio2022buildtools --package-parameters "--add Microsoft.VisualStudio.Component.VC.Tools.x86.x64" -y

    # Configure MSVC and Set OpenSSL Environment on Windows
    - name: Configure MSVC and Set OpenSSL Environment on Windows
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        if exist "C:\Program Files\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvars64.bat" (
          "C:\Program Files\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvars64.bat" && ^
          set OPENSSL_DIR="C:\Program Files\OpenSSL" && ^
          set OPENSSL_INCLUDE_DIR="C:\Program Files\OpenSSL\include" && ^
          set OPENSSL_LIB_DIR="C:\Program Files\OpenSSL\lib" && ^
          echo "OPENSSL_DIR=$OPENSSL_DIR" >> %GITHUB_ENV% && ^
          echo "OPENSSL_INCLUDE_DIR=$OPENSSL_INCLUDE_DIR" >> %GITHUB_ENV% && ^
          echo "OPENSSL_LIB_DIR=$OPENSSL_LIB_DIR" >> %GITHUB_ENV%
        )

    # Steps for Linux/macOS or other shared tasks...
    - name: Create askpass.sh script
      if: matrix.os == 'ubuntu-22.04' || matrix.os == 'macos-ventura'
      run: |
        echo "#!/bin/sh" > /tmp/askpass.sh
        echo "echo '${{ secrets.SUDO_PASSWORD }}'" >> /tmp/askpass.sh
        chmod +x /tmp/askpass.sh
      env:
        SUDO_ASKPASS: /tmp/askpass.sh

    - name: Install system dependencies on Linux
      if: matrix.os == 'ubuntu-22.04'
      run: |
        sudo -A apt-get update
        sudo -A apt-get install -y build-essential libgtk-3-dev libsoup2.4-dev libjavascriptcoregtk-4.0-dev libwebkit2gtk-4.0-dev
      env:
        SUDO_ASKPASS: /tmp/askpass.sh

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: Install pnpm
      run: |
        npm install -g pnpm

    - name: Install dependencies
      run: pnpm install

    # Install Rust on Linux/macOS
    - name: Set up Rust on Linux/macOS
      if: runner.os != 'Windows'
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    # Install Rust on Windows
    - name: Install Rust on Windows
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        Invoke-WebRequest -Uri https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe -OutFile rustup-init.exe
        Start-Process -FilePath ./rustup-init.exe -ArgumentList "-y" -Wait
        $env:Path += ";$env:USERPROFILE\.cargo\bin"
        & rustup default stable

    - name: Install Tauri CLI
      run: pnpm install --save-dev @tauri-apps/cli

    - name: Build Tauri app on Linux/macOS
      if: runner.os != 'Windows'
      run: pnpm run tauri build
      shell: bash

    - name: Build Tauri app on Windows
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        $vcvarsPath = (Get-ChildItem -Path "C:\Program Files\Microsoft Visual Studio" -Recurse -Filter "vcvars64.bat" -ErrorAction SilentlyContinue | Select-Object -First 1).FullName
        if ($vcvarsPath) {
          & $vcvarsPath
          pnpm run tauri build
        } else {
          Write-Host "vcvars64.bat not found"
          exit 1
        }

    # Upload build artifacts
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: tauri-artifacts-${{ matrix.os }}
        path: ./src-tauri/target/release/bundle/**

