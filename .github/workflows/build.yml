name: Build Kaleidoswap App

on:
  push:
    branches:
      - dev
      - ci_cd
    tags:
      - 'v*.*.*'

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-22.04  # Usa Ubuntu 22.04
            runner-label: [self-hosted, linux-runner]
          - os: macos-ventura  # Usa macOS Ventura
            runner-label: [self-hosted, macos-runner]
          - os: windows-server-2022  # Usa Windows Server 2022
            runner-label: [self-hosted, windows-runner]

    runs-on: ${{ matrix.runner-label }}

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.16.0'

    - name: Install pnpm
      run: npm install -g pnpm

    - name: Install system dependencies on Linux
      if: matrix.os == 'ubuntu-22.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libsoup2.4-dev libjavascriptcoregtk-4.0-dev libwebkit2gtk-4.0-dev

    - name: Install system dependencies on macOS
      if: matrix.os == 'macos-ventura'
      run: |
        brew install openssl gtk+

    - name: Set OpenSSL environment variables on macOS
      if: matrix.os == 'macos-ventura'
      run: |
        OPENSSL_PREFIX=$(brew --prefix openssl)
        echo "OPENSSL_DIR=$OPENSSL_PREFIX" >> $GITHUB_ENV
        echo "OPENSSL_INCLUDE_DIR=$OPENSSL_PREFIX/include" >> $GITHUB_ENV
        echo "OPENSSL_LIB_DIR=$OPENSSL_PREFIX/lib" >> $GITHUB_ENV

    - name: Install MSVC Build Tools and OpenSSL on Windows
      if: matrix.os == 'windows-server-2022'
      run: |
        choco install openssl visualstudio2019buildtools --package-parameters "--add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 --add Microsoft.VisualStudio.Component.Windows10SDK.18362"

    - name: Configure MSVC and Set OpenSSL Environment on Windows
      if: matrix.os == 'windows-server-2022'
      shell: cmd
      run: |
        "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC\Auxiliary\Build\vcvars64.bat" && ^
        set OPENSSL_DIR="C:\Program Files\OpenSSL" && ^
        set OPENSSL_INCLUDE_DIR="C:\Program Files\OpenSSL\include" && ^
        set OPENSSL_LIB_DIR="C:\Program Files\OpenSSL\lib" && ^
        echo "OPENSSL_DIR=$OPENSSL_DIR" >> %GITHUB_ENV% && ^
        echo "OPENSSL_INCLUDE_DIR=$OPENSSL_INCLUDE_DIR" >> %GITHUB_ENV% && ^
        echo "OPENSSL_LIB_DIR=$OPENSSL_LIB_DIR" >> %GITHUB_ENV%

    - name: Install dependencies
      run: pnpm install

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Install Tauri CLI
      run: pnpm install --save-dev @tauri-apps/cli

    - name: Build Tauri app
      run: |
        if [ ${{ matrix.os }} == 'windows-server-2022' ]; then
          "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC\Auxiliary\Build\vcvars64.bat" && pnpm run tauri build
        else
          pnpm run tauri build
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: tauri-artifacts-${{ matrix.os }}
        path: ./src-tauri/target/release/bundle/**

